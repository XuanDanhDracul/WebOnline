// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webonline.Data.EF;

namespace Webonline.Data.Migrations
{
    [DbContext(typeof(SchoolDbConnect))]
    [Migration("20210112102055_MigrationName")]
    partial class MigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("Webonline.Data.EF.Khoa", b =>
                {
                    b.Property<int>("IdKhoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenKhoa")
                        .IsRequired()
                        .HasColumnName("TenKhoa")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdKhoa");

                    b.ToTable("KhoaSinhVien");

                    b.HasData(
                        new
                        {
                            IdKhoa = 123,
                            TenKhoa = "KhoaCNTT"
                        },
                        new
                        {
                            IdKhoa = 124,
                            TenKhoa = "KhoaCNSinhHoc"
                        },
                        new
                        {
                            IdKhoa = 125,
                            TenKhoa = "KhoaHoa"
                        });
                });

            modelBuilder.Entity("Webonline.Data.EF.MonHoc", b =>
                {
                    b.Property<int>("ID_Mon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdKhoa")
                        .HasColumnType("int");

                    b.Property<string>("Ten_MH")
                        .IsRequired()
                        .HasColumnName("TenMonHoc")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID_Mon");

                    b.ToTable("MonHoc");

                    b.HasData(
                        new
                        {
                            ID_Mon = 345,
                            IdKhoa = 123,
                            Ten_MH = "Toan"
                        },
                        new
                        {
                            ID_Mon = 245,
                            IdKhoa = 123,
                            Ten_MH = "Van"
                        },
                        new
                        {
                            ID_Mon = 145,
                            IdKhoa = 125,
                            Ten_MH = "Hoa"
                        });
                });

            modelBuilder.Entity("Webonline.Data.EF.SinhVien", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdKhoa")
                        .HasColumnType("int");

                    b.Property<string>("MaSV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("IdKhoa");

                    b.ToTable("SinhViens");

                    b.HasData(
                        new
                        {
                            id = 1,
                            IdKhoa = 123,
                            MaSV = "12345",
                            Name = "Danh"
                        },
                        new
                        {
                            id = 2,
                            IdKhoa = 124,
                            MaSV = "123456",
                            Name = "Nam"
                        },
                        new
                        {
                            id = 3,
                            IdKhoa = 123,
                            MaSV = "1234",
                            Name = "Hung"
                        });
                });

            modelBuilder.Entity("Webonline.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("Webonline.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Webonline.Data.Entities.MonHocKhoa", b =>
                {
                    b.Property<int>("KhoaID")
                        .HasColumnType("int");

                    b.Property<int>("MonhocID")
                        .HasColumnType("int");

                    b.HasKey("KhoaID", "MonhocID");

                    b.HasIndex("MonhocID");

                    b.ToTable("MonHocKhoa");
                });

            modelBuilder.Entity("Webonline.Data.Entities.Sinh_Mon", b =>
                {
                    b.Property<int>("Id_Mon")
                        .HasColumnType("int");

                    b.Property<int>("SinhvienId")
                        .HasColumnType("int");

                    b.HasKey("Id_Mon", "SinhvienId");

                    b.HasIndex("SinhvienId");

                    b.ToTable("MonHocSinhVien");

                    b.HasData(
                        new
                        {
                            Id_Mon = 345,
                            SinhvienId = 1
                        },
                        new
                        {
                            Id_Mon = 345,
                            SinhvienId = 2
                        },
                        new
                        {
                            Id_Mon = 345,
                            SinhvienId = 3
                        });
                });

            modelBuilder.Entity("Webonline.Data.EF.SinhVien", b =>
                {
                    b.HasOne("Webonline.Data.EF.Khoa", "Khoa")
                        .WithMany("SinhViens")
                        .HasForeignKey("IdKhoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webonline.Data.Entities.MonHocKhoa", b =>
                {
                    b.HasOne("Webonline.Data.EF.Khoa", "Khoa")
                        .WithMany("MonHocKhoa")
                        .HasForeignKey("KhoaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webonline.Data.EF.MonHoc", "monHoc")
                        .WithMany("MonHocKhoa")
                        .HasForeignKey("MonhocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webonline.Data.Entities.Sinh_Mon", b =>
                {
                    b.HasOne("Webonline.Data.EF.MonHoc", "MonHoc")
                        .WithMany("SinhMon")
                        .HasForeignKey("Id_Mon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webonline.Data.EF.SinhVien", "SinhVien")
                        .WithMany("SinhMon")
                        .HasForeignKey("SinhvienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
